@using TestASP.BlazorServer.Models.Questionnaires.Admin;
@using TestASP.Model.Questionnaires;
@using TestASP.Data.Enums;
@using TestASP.BlazorServer.Extensions;
@using TestASP.Common.Extensions;
@using TestASP.BlazorServer.Components.Bootstrap;

@inject ToastService _toastService
@inject DialogService _dialog
@if(Question != null)
{
    <Accordion>
        <AccordionItem IsShow="true">
            <HeaderTemplate>

                @if (Question is BlazorAdminQuestion question)
                {
                    <h4> Question @Question.Number. @Question.Question</h4>
                }
                else
                {
                    <h4> Sub Question @Question.Number. @Question.Question</h4>
                }
                <Button class="ms-auto" ButtonStyle="ButtonStyle.Round" ButtonType="ButtonType.Button" Color="Color.Danger" Text="Delete" OnClick="DeleteQuestion_Clicked" />
            </HeaderTemplate>
            <BodyTemplate>
                <div class="col">

                    @if (IsBootStrap)
                    {
                        <BootstrapInput ShowLabel="true" DisplayText="Number" @bind-Value="@Question.Number" />
                    }
                    else
                    {
                        <InputText DisplayName="Answer" @bind-Value="Question.Number" />
                    }
                    <ValidationMessage For="() => Question.Number" />
                </div>
                <div class="col">
                    @if (IsBootStrap)
                    {
                        <Textarea ShowLabel="true" placeholder="Please enter ..." @bind-Value="@Question.Question" />
                    }
                    else
                    {
                        <InputTextArea DisplayName="Question" placeholder="Please enter ..."  @bind-Value="Question.Question"/>
                    }
                    <ValidationMessage For="() => Question.Question" />
                </div>
                <div class="col">
                    @if (IsBootStrap)
                    {
                        <Select ShowLabel="true" IsVirtualize="true" DisplayText="Answer Type" PlaceHolder="Asnwer Type" @bind-Value="@Question.AnswerTypeSelected" Items="@AnswerTypes" OnSelectedItemChanged="OnAnswerTypeSelectedItem" />
                    }
                    else
                    {
                        <InputSelect DisplayText="Answer Type" PlaceHolder="Asnwer Type"
                                        @bind-Value="@Question.AnswerTypeSelected" >
                            @foreach (var answerType in AnswerTypes)
                            {
                                <option value="@answerType.Value">@answerType.Text</option>
                            }
                        </InputSelect>
                        <InputTextArea DisplayName="Question" placeholder="Please enter ..." @bind-Value="Question.Question" />
                    }
                    <ValidationMessage For="() => Question.AnswerTypeSelected" />
                </div>

                @if (Question is BlazorAdminSubQuestion)
                {
                    <div class="col">

                        @if (IsBootStrap)
                        {
                            <Select ShowLabel="true" IsVirtualize="true" DisplayText="Question Type" PlaceHolder="Question Type" @bind-Value="@Question.QuestionTypeSelected"
                                    Items="@QuestionTypes" OnSelectedItemChanged="OnAnswerTypeSelectedItem" />
                        }
                        else
                        {
                            <InputSelect DisplayText="Answer Type" PlaceHolder="Asnwer Type"
                                            @bind-Value="@Question.AnswerTypeSelected">
                                @foreach (var questionType in QuestionTypes)
                                {
                                    <option value="@questionType.Value">@questionType.Text</option>
                                }
                            </InputSelect>
                            <InputTextArea DisplayName="Question" placeholder="Please enter ..." @bind-Value="Question.Question" />
                        }
                        <ValidationMessage For=" () => Question.QuestionTypeSelected" />
                    </div>
                }

                @if (Question.AnswerTypeId == AnswerTypeEnum.MultipleChoice)
                {
                    <Accordion class="mt-2">
                        <AccordionItem IsShow="true">
                            <HeaderTemplate>
                                <h5>Choices</h5>
                            </HeaderTemplate>
                            <BodyTemplate>
                                @if (Question.Choices?.Count > 0)
                                {
                                    @foreach (var choice in Question.Choices)
                                    {
                                        <div class="row mt-2">
                                            <div class="col-2">
                                                <BootstrapInput ShowLabel="true" PlaceHolder="Value" @bind-Value="@choice.Value" />
                                                <ValidationMessage For="() => choice.Value" />
                                            </div>
                                            <div class="col">
                                                <BootstrapInput ShowLabel="true" PlaceHolder="Name" @bind-Value="@choice.Name" />
                                                <ValidationMessage For="() => choice.Name" />
                                            </div>
                                        </div>
                                    }
                                }
                            </BodyTemplate>
                            <FooterTemplate>
                                <Button class="ms-3" ButtonStyle="ButtonStyle.Round" ButtonType="ButtonType.Button" Text="Add Choice" OnClick="AddChoices" />
                            </FooterTemplate>
                        </AccordionItem>
                    </Accordion>
                    <ValidationMessage For="() => Question.Choices" />

                }
                @if (Question is BlazorAdminQuestion question)
                {
                    <Stack class="ms-4 mt-2 gap-3"
                            AlignItems="StackAlignItems.Stretch"
                            Justify="StackJustifyContent.Start"
                            IsRow="false">
                        @if (question.SubQuestions != null)
                        {
                            @foreach (var subQuestion in question.SubQuestions!)
                            {
                                <StackItem>
                                    <AddQuestion Question="@subQuestion" IsBootStrap="@IsBootStrap"
                                                    AnswerTypes="@AnswerTypes"
                                                    QuestionTypes="@GetSubAnswerQuestionTyes()"
                                                    OnItemDeleted="@OnSubItemDeleted" />
                                </StackItem>
                            }
                        }
                    </Stack>
                }
            </BodyTemplate>
            <FooterTemplate>
                @if (Question is BlazorAdminQuestion)
                {
                    <Button ButtonStyle="ButtonStyle.Round" ButtonType="ButtonType.Button" Text="Add SubQuestionn" OnClick="AddSubQuestion" />
                }
            </FooterTemplate>
        </AccordionItem>
    </Accordion>
}

@*<Card>
    <HeaderTemplate>

        @if (Question is BlazorAdminQuestion question)
        {
            <h4> Question</h4>
        }
        else
        {
            <h4> Sub Question</h4>
        }
        <Button class="ms-auto" ButtonStyle="ButtonStyle.Round" ButtonType="ButtonType.Button" Color="Color.Danger" Text="Delete" OnClick="DeleteQuestion_Clicked" />
    </HeaderTemplate>
    <BodyTemplate>
        <div class="col">
            <BootstrapInput ShowLabel="true" DisplayText="Question Number" @bind-Value="@Question.Number" />
            <ValidationMessage For="() => Question.Number" />
        </div>
        <div class="col">
            <Textarea ShowLabel="true" placeholder="Please enter ..." @bind-Value="@Question.Question" />
            <ValidationMessage For="() => Question.Question" />
        </div>
        <div class="col">
            <Select ShowLabel="true" IsVirtualize="true" DisplayText="Answer Type" PlaceHolder="Asnwer Type" @bind-Value="@Question.AnswerTypeSelected" Items="@AnswerTypes" OnSelectedItemChanged="OnAnswerTypeSelectedItem" />
            <ValidationMessage For="() => Question.AnswerTypeSelected" />
        </div>

        @if (Question is BlazorAdminSubQuestion)
        {
            <div class="col">
                <Select ShowLabel="true" IsVirtualize="true" DisplayText="Question Type" PlaceHolder="Question Type" @bind-Value="@Question.QuestionTypeSelected"
                        Items="@QuestionTypes" OnSelectedItemChanged="OnAnswerTypeSelectedItem" />
                <ValidationMessage For="() => Question.QuestionTypeSelected" />
            </div>
        }

        @if (Question.AnswerTypeId == AnswerTypeEnum.MultipleChoice)
        {
            <Card class="mt-2">
                <HeaderTemplate>
                    <h5>Choices</h5>
                </HeaderTemplate>
                <BodyTemplate>
                    @if (Question.Choices?.Count > 0)
                    {
                        @foreach (var choice in Question.Choices)
                        {
                            <div class="row mt-2">
                                <div class="col-2">
                                    <BootstrapInput ShowLabel="true" PlaceHolder="Value" @bind-Value="@choice.Value" />
                                    <ValidationMessage For="() => choice.Value" />
                                </div>
                                <div class="col">
                                    <BootstrapInput ShowLabel="true" PlaceHolder="Name" @bind-Value="@choice.Name" />
                                    <ValidationMessage For="() => choice.Name" />
                                </div>
                            </div>
                        }
                    }
                </BodyTemplate>
                <FooterTemplate>
                    <Button class="ms-3" ButtonStyle="ButtonStyle.Round" ButtonType="ButtonType.Button" Text="Add Choice" OnClick="AddChoices" />
                </FooterTemplate>
            </Card>

        }
        @if (Question is BlazorAdminQuestion question)
        {
            <Stack class="ms-4 mt-2 gap-3"
                   AlignItems="StackAlignItems.Stretch"
                   Justify="StackJustifyContent.Start"
                   IsRow="false">
                @if (question.SubQuestions != null)
                {
                    @foreach (var subQuestion in question.SubQuestions)
                    {
                        <StackItem>
                            <AddQuestion Question="@subQuestion" IsBootStrap="@IsBootStrap"
                                         AnswerTypes="@AnswerTypes"
                                         QuestionTypes="@GetSubAnswerQuestionTyes()"
                                         OnItemDeleted="@OnSubItemDeleted" />
                        </StackItem>
                    }
                }
            </Stack>
        }
    </BodyTemplate>
    <FooterTemplate>
        @if (Question is BlazorAdminQuestion)
        {
            <Button ButtonStyle="ButtonStyle.Round" ButtonType="ButtonType.Button" Text="Add SubQuestionn" OnClick="AddSubQuestion" />
        }

    </FooterTemplate>

</Card>*@

@code {
    [Parameter] public BaseBlazorAdminQuestionResponseDto? Question { get; set; }
    [Parameter] public bool IsBootStrap { get; set; } = true;
    [Parameter] public IEnumerable<SelectedItem>? AnswerTypes { get; set; }
    [Parameter] public IEnumerable<SelectedItem>? QuestionTypes { get; set; }
    [Parameter] public Action<BaseBlazorAdminQuestionResponseDto> OnItemDeleted { get; set; }

    protected override void OnInitialized()
    {
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (Question.Id > 0)
        {
            AnswerTypes?.ForEach((atIndex, answerType) =>
            {
                if (answerType.Value == Question.AnswerTypeId.ToString())
                {
                    answerType.Active = true;
                    Question.AnswerTypeSelected = answerType;
                }
            });

            QuestionTypes?.ForEach((qtIndex, questionType) =>
            {
                if (questionType.Value == Question.QuestionTypeId.ToString())
                {
                    questionType.Active = true;
                    Question.QuestionTypeSelected = questionType;
                }
            });
        }
    }

    public async Task OnItemSelected(IEnumerable<SelectedItem> items, string selectedStr)
    {
        StateHasChanged();
    }

    public IEnumerable<SelectedItem>? GetSubAnswerQuestionTyes()
    {
        return QuestionTypes?.Where(arg =>
        {
            bool other = true;
            switch (Question.AnswerTypeId)
            {
                case AnswerTypeEnum.Boolean:
                case AnswerTypeEnum.BooleanWithSubQuestion:
                    break;
                default:
                    other = arg.Value != QuestionTypeEnum.BooleanNoSubQuestion.ToString() &&
                            arg.Value != QuestionTypeEnum.BooleanYesSubQuestion.ToString();
                    break;
            }
            return other && arg.Value != QuestionTypeEnum.Question.ToString();
        });
    }

    public void OnSubItemDeleted(BaseBlazorAdminQuestionResponseDto deletedItem)
    {
        if (deletedItem is BlazorAdminSubQuestion deletedSubQuestion &&
            Question is BlazorAdminQuestion question &&
            question.SubQuestions?.Count > 0)
        {
            question.SubQuestions!.Remove(deletedSubQuestion);
            StateHasChanged();
        }
    }

    public void DeleteQuestion_Clicked()
    {
        OnItemDeleted?.Invoke(Question);
    }

    public async Task OnAnswerTypeSelectedItem(SelectedItem selectedItem)
    {
        StateHasChanged();
    }

    public void AddSubQuestion()
    {
        if (Question is BlazorAdminQuestion adminQuestion)
        {
            if (adminQuestion.SubQuestions == null)
            {
                adminQuestion.SubQuestions = new List<BlazorAdminSubQuestion>();
            }
            adminQuestion.SubQuestions.Add(new BlazorAdminSubQuestion());
            StateHasChanged();
        }
    }

    public void AddChoices()
    {
        if (Question.AnswerTypeId == AnswerTypeEnum.MultipleChoice)
        {
            if (Question.Choices == null)
            {
                Question.Choices = new List<QuestionChoiceDto>();
            }
            Question.Choices.Add(new QuestionChoiceDto());
            StateHasChanged();
        }
    }
}

