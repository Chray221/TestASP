@page "/Questionnaire/{QuestionnaireId:int}/Answer"
@page "/Questionnaire/{QuestionnaireId:int}/Answer/{UserQuestionnaireId:int}"

@using TestASP.Model;
@using TestASP.BlazorServer.Models;
@using TestASP.Model.Questionnaires;
@using TestASP.Data.Enums;
@using TestASP.Common.Extensions;
@using AutoMapper;
@using Microsoft.AspNetCore.Mvc;
@using TestASP.BlazorServer.Components;
@using System.ComponentModel.DataAnnotations;

@inherits AuthorizedPage

@attribute [AutoValidateAntiforgeryToken]

@inject IQuestionnaireService _questionnaireService
@inject ToastService _toastService
@inject NavigationManager _navigationManager
@inject IMapper _mapper

<AuthorizeView>
    <NotAuthorized>
        <h1>You  have to login to answer this questionnaire</h1>
    </NotAuthorized>
    <Authorized>
        @if (Questionnaire != null)
        {
            <EditForm Model="@Questionnaire" Context="Context" OnValidSubmit="SubmitQuestionnaireAnswer">
                <ObjectGraphDataAnnotationsValidator />
                <Card>
                    <BodyTemplate>
                        <h4>@Questionnaire.Name</h4>
                        <p class="card-text">@Questionnaire.Description</p>
                        @*<ValidationSummary />*@
                        <Stack class="gap-3" AlignItems="StackAlignItems.Stretch" Justify="StackJustifyContent.Start" IsRow="false">
                            @foreach (var questionAnswer in Questionnaire.QuestionAnswers)
                            {
                                <StackItem>
                                    <QuestionAnswer Question="@questionAnswer" />
                                </StackItem>
                            }
                        </Stack>
                    </BodyTemplate>
                    <FooterTemplate>
                        <Button ButtonStyle="ButtonStyle.Round" ButtonType="ButtonType.Submit">@(UserQuestionnaireId == null ? "Save" : "Update")</Button>
                    </FooterTemplate>
                </Card>
            </EditForm>
            <ValidateForm hidden @ref="validateForm"
                          Model="@Questionnaire" OnValidSubmit="SubmitQuestionnaireAnswer" ShowRequiredMark="true" ValidateAllProperties="true">
                <ObjectGraphDataAnnotationsValidator />
                <BootstrapBlazorDataAnnotationsValidator />
                <Card>
                    <BodyTemplate>
                        <h4>@Questionnaire.Name</h4>
                        <p class="card-text">@Questionnaire.Description</p>
                        <Stack class="gap-3" AlignItems="StackAlignItems.Stretch" Justify="StackJustifyContent.Start" IsRow="false">
                            @foreach (var question in Questionnaire.QuestionAnswers)
                            {
                                <StackItem>
                                    @foreach (var questionAnswer in Questionnaire.QuestionAnswers)
                                    {
                                        <StackItem>
                                            <QuestionAnswer Question="@questionAnswer" />
                                        </StackItem>
                                    }
                                </StackItem>
                            }
                            <Button ButtonStyle="ButtonStyle.Round" ButtonType="ButtonType.Submit">@(UserQuestionnaireId == null ? "Submit" : "Update" ) </Button>
                        </Stack>
                    </BodyTemplate>
                </Card>
            </ValidateForm>
        }
        else if (IsLoading)
        {
            <h1>Loading...</h1>
        }
        else
        {
            <h1>QuestionnaireNot Found</h1>
        }
    </Authorized>
</AuthorizeView>

@code
{
    [Parameter] public int QuestionnaireId { get; set; }
    [Parameter] public int? UserQuestionnaireId { get; set; } = null;

    public BootStrapQuestionnaireQuestionsResponseDto? Questionnaire { get; set; }
    public bool IsLoading { get; set; } = true;
    private ValidateForm? validateForm;
    private EditContext? EditContext { get; set; }
    ValidationMessageStore? MessageStore;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        await GetLoggedInUser();

        if (firstRender && IsLoggedIn)
        {
            var getWithQuestionResult = await _questionnaireService.GetWithQuestionAnswerAsync(LoggedInUser!.Id ?? 0, QuestionnaireId, UserQuestionnaireId);
            if (!getWithQuestionResult.IsSuccess)
            {
                if (!string.IsNullOrEmpty(getWithQuestionResult.Error))
                {
                    await _toastService.Error("Retreiving Questionnaire Error", getWithQuestionResult.Error);
                }
                return;
            }
            Questionnaire = _mapper.Map<BootStrapQuestionnaireQuestionsResponseDto>(getWithQuestionResult.Data);
            IsLoading = false;
            StateHasChanged();
        }
    }

    public void FieldChanged(object sender, FieldChangedEventArgs arg)
    {
        MessageStore.Clear(arg.FieldIdentifier);
        //EditContext.NotifyFieldChanged(arg.FieldIdentifier);
    }

    public async Task SubmitQuestionnaireAnswer(EditContext context)
    {
        var questionnaireValidations = Questionnaire?.Validate(null!);
        if (questionnaireValidations?.Count() > 0)
        {
            foreach (var result in questionnaireValidations)
            {
                foreach (string propName in result.MemberNames)
                {
                    validateForm?.SetError(propName, result.ErrorMessage ?? "Required");
                }
            }
            StateHasChanged();
            return;
        }
        //Questionnaire
        if (IsLoggedIn)
        {
            ApiResult<QuestionnaireQuestionsResponseDto> questionAnswerResponse = null;
            if (UserQuestionnaireId == null)
            {
                questionAnswerResponse = await _questionnaireService.SaveAsync(
                    LoggedInUser?.Id ?? 0,
                    QuestionnaireId,
                    _mapper.Map<List<QuestionnaireAnswerSubAnswerRequestDto>>(Questionnaire));
            }
            else // updated
            {
                questionAnswerResponse = await _questionnaireService.UpdateAsync(
                    LoggedInUser?.Id ?? 0,
                    QuestionnaireId,
                    UserQuestionnaireId ?? 0,
                    _mapper.Map<List<QuestionnaireAnswerSubAnswerRequestDto>>(Questionnaire));
            }
            if (!questionAnswerResponse.IsSuccess)
            {
                if (questionAnswerResponse.IsModelError)
                {

                }
                else
                {
                    await _toastService.Error("Save Questionnaire Answer Error!", questionAnswerResponse.Error);
                }
                return;
            }
            else
            {
                await _toastService.Success(UserQuestionnaireId == null ? "Successfully save answers" : "Successfully updated answers", questionAnswerResponse.Message);
                if (UserQuestionnaireId == null)
                {
                    await Task.Delay(2000);
                    _navigationManager.NavigateTo("Questionnaire", true);
                }
            }

        }
    }
}

